"use strict";(self.webpackChunkreactmain=self.webpackChunkreactmain||[]).push([[128],{"./src/stories/tasks-api.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CreateTask:()=>CreateTask,DeleteTask:()=>DeleteTask,GetTasks:()=>GetTasks,UpdateTasks:()=>UpdateTasks,__namedExportsOrder:()=>__namedExportsOrder,default:()=>tasks_api_stories});var react=__webpack_require__("./node_modules/react/index.js"),todolists_api=__webpack_require__("./src/api/todolists-api.ts");const tasksApi={getTasks:todolistId=>todolists_api.KJ.get(`todo-lists/${todolistId}/tasks`),createTask:(todolistId,title)=>todolists_api.KJ.post(`todo-lists/${todolistId}/tasks`,{title}),deleteTask:(todolistId,taskId)=>todolists_api.KJ.delete(`todo-lists/${todolistId}/tasks/${taskId}`),updateTasks:(todolistId,taskId,model)=>todolists_api.KJ.put(`todo-lists/${todolistId}/tasks/${taskId}`,model)};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const tasks_api_stories={title:"API"},GetTasks=()=>{const[state,setState]=(0,react.useState)(null),[todolistId,setTodolistId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{children:[JSON.stringify(state),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{placeholder:"todolistId",value:todolistId,onChange:e=>{setTodolistId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("button",{onClick:()=>{tasksApi.getTasks(todolistId).then((res=>{setState(res.data)}))},children:"get tasks"})]})]})},CreateTask=()=>{const[state,setState]=(0,react.useState)(null),[taskTitle,setTaskTitle]=(0,react.useState)(""),[todolistId,setTodolistId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{children:[JSON.stringify(state),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{placeholder:"todolistId",type:"text",value:todolistId,onChange:e=>{setTodolistId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"task Title",type:"text",value:taskTitle,onChange:e=>{setTaskTitle(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("button",{onClick:()=>{tasksApi.createTask(todolistId,taskTitle).then((res=>{setState(res.data.data)}))},children:"create task"})]})]})},DeleteTask=()=>{const[state,setState]=(0,react.useState)(null),[taskId,setTaskId]=(0,react.useState)(""),[todolistId,settodolistId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{children:[JSON.stringify(state),(0,jsx_runtime.jsx)("input",{placeholder:"todolistId",type:"text",value:todolistId,onChange:e=>{settodolistId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"taskId",type:"text",value:taskId,onChange:e=>{setTaskId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("button",{onClick:()=>{tasksApi.deleteTask("2916c6e6-d2bf-4ba8-b528-b0117ae6c471","").then((res=>{setState(res.data)}))},children:"delete task"})]})},UpdateTasks=()=>{const[state,setState]=(0,react.useState)(null),[taskTitle,setTaskTitle]=(0,react.useState)("title1"),[taskDiscription,setTaskDiscription]=(0,react.useState)("description 1"),[status,setStatus]=(0,react.useState)(0),[priority,setPriority]=(0,react.useState)(0),[startDate,setStartDate]=(0,react.useState)(""),[deadline,setDeadLine]=(0,react.useState)(""),[todolistId,setTodolistId]=(0,react.useState)(""),[taskId,setTaskId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)("div",{children:[JSON.stringify(state),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("input",{placeholder:"todolistId",value:todolistId,onChange:e=>{setTodolistId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"taskID",value:taskId,onChange:e=>{setTaskId(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"task Title",value:taskTitle,onChange:e=>{setTaskTitle(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"Discription",value:taskDiscription,onChange:e=>{setTaskDiscription(e.currentTarget.value)}}),(0,jsx_runtime.jsx)("input",{placeholder:"Status",value:status,onChange:e=>{setStatus(+e.currentTarget.value)}}),(0,jsx_runtime.jsx)("button",{onClick:()=>{tasksApi.updateTasks(todolistId,taskId,{deadline:"",description:taskDiscription,priority,startDate:"",status,title:taskTitle}).then((res=>{setState(res.data)}))},children:"update task"})]})]})},__namedExportsOrder=["GetTasks","CreateTask","DeleteTask","UpdateTasks"];GetTasks.parameters={...GetTasks.parameters,docs:{...GetTasks.parameters?.docs,source:{originalSource:'() => {\n  const [state, setState] = useState<any>(null);\n  const [todolistId, setTodolistId] = useState<string>("");\n  const getTasks = () => {\n    tasksApi.getTasks(todolistId).then(res => {\n      setState(res.data);\n    });\n  };\n  return <div>{JSON.stringify(state)}\r\n        <div>\r\n            <input placeholder={"todolistId"} value={todolistId} onChange={e => {\n        setTodolistId(e.currentTarget.value);\n      }} />\r\n            <button onClick={getTasks}>get tasks</button>\r\n        </div>\r\n    </div>;\n}',...GetTasks.parameters?.docs?.source}}},CreateTask.parameters={...CreateTask.parameters,docs:{...CreateTask.parameters?.docs,source:{originalSource:'() => {\n  const [state, setState] = useState<any>(null);\n  const [taskTitle, setTaskTitle] = useState<string>("");\n  const [todolistId, setTodolistId] = useState<string>("");\n  const createTask = () => {\n    tasksApi.createTask(todolistId, taskTitle).then(res => {\n      setState(res.data.data);\n    });\n  };\n  return <div>\r\n        {JSON.stringify(state)}\r\n        <div>\r\n            <input placeholder={"todolistId"} type="text" value={todolistId} onChange={e => {\n        setTodolistId(e.currentTarget.value);\n      }} />\r\n            <input placeholder={"task Title"} type="text" value={taskTitle} onChange={e => {\n        setTaskTitle(e.currentTarget.value);\n      }} />\r\n            <button onClick={createTask}>create task</button>\r\n        </div>\r\n    </div>;\n}',...CreateTask.parameters?.docs?.source}}},DeleteTask.parameters={...DeleteTask.parameters,docs:{...DeleteTask.parameters?.docs,source:{originalSource:'() => {\n  const [state, setState] = useState<any>(null);\n  const [taskId, setTaskId] = useState<string>("");\n  const [todolistId, settodolistId] = useState<string>("");\n  const deleteTask = () => {\n    const todolistId = "2916c6e6-d2bf-4ba8-b528-b0117ae6c471";\n    const taskId = "";\n    tasksApi.deleteTask(todolistId, taskId).then(res => {\n      setState(res.data);\n    });\n  };\n  return <div>\r\n        {JSON.stringify(state)}\r\n        <input placeholder={"todolistId"} type="text" value={todolistId} onChange={e => {\n      settodolistId(e.currentTarget.value);\n    }} />\r\n        <input placeholder={"taskId"} type="text" value={taskId} onChange={e => {\n      setTaskId(e.currentTarget.value);\n    }} />\r\n        <button onClick={deleteTask}>delete task</button>\r\n    </div>;\n}',...DeleteTask.parameters?.docs?.source}}},UpdateTasks.parameters={...UpdateTasks.parameters,docs:{...UpdateTasks.parameters?.docs,source:{originalSource:'() => {\n  //из типизации UpdateTaskModelType\n  const [state, setState] = useState<any>(null);\n  const [taskTitle, setTaskTitle] = useState<string>("title1");\n  const [taskDiscription, setTaskDiscription] = useState<string>("description 1");\n  const [status, setStatus] = useState<number>(0);\n  const [priority, setPriority] = useState<number>(0);\n  const [startDate, setStartDate] = useState<string>("");\n  const [deadline, setDeadLine] = useState<string>("");\n  const [todolistId, setTodolistId] = useState<string>("");\n  const [taskId, setTaskId] = useState<string>("");\n  const updateTask = () => {\n    tasksApi.updateTasks(todolistId, taskId, {\n      deadline: "",\n      description: taskDiscription,\n      priority: priority,\n      startDate: "",\n      status: status,\n      title: taskTitle\n    }).then(res => {\n      setState(res.data);\n    });\n  };\n  return <div>\r\n        {JSON.stringify(state)}\r\n        <div>\r\n            <input placeholder={"todolistId"} value={todolistId} onChange={e => {\n        setTodolistId(e.currentTarget.value);\n      }} />\r\n            <input placeholder={"taskID"} value={taskId} onChange={e => {\n        setTaskId(e.currentTarget.value);\n      }} />\r\n            <input placeholder={"task Title"} value={taskTitle} onChange={e => {\n        setTaskTitle(e.currentTarget.value);\n      }} />\r\n            <input placeholder={"Discription"} value={taskDiscription} onChange={e => {\n        setTaskDiscription(e.currentTarget.value);\n      }} />\r\n            <input placeholder={"Status"} value={status} onChange={e => {\n        setStatus(+e.currentTarget.value);\n      }} />\r\n            <button onClick={updateTask}>update task</button>\r\n        </div>\r\n    </div>;\n}',...UpdateTasks.parameters?.docs?.source}}}},"./src/api/todolists-api.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ey:()=>todolistsApi,KJ:()=>instance});const config={headers:{Authorization:"Bearer 97cad68f-9e7c-406e-9978-33f93f5480f0","API-KEY":"6c44c2cf-a10e-40d1-a32c-651c40ce19bf"}},instance=__webpack_require__("./node_modules/axios/lib/axios.js").A.create({baseURL:"https://social-network.samuraijs.com/api/1.1/",...config}),todolistsApi={getTodolists:()=>instance.get("todo-lists"),createTodolist:title=>instance.post("todo-lists",{title}),deleteTodolist:id=>instance.delete(`todo-lists/${id}`),updateTodolist:(id,title)=>instance.put(`todo-lists/${id}`,{title})}}}]);